@using System.Security.Claims;
@model CommunicationsApp.Application.DTOs.Message
@{
    int currentUserId = int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value);
    bool isCurrentUserTheSender = Model.User.Id == currentUserId;
}

<div id="openMessage@(Model.Id)" data-id="@Model.Id" class="message-container @(isCurrentUserTheSender ? "sender-message-container" : "")">
    <div class="message-bubble @(isCurrentUserTheSender ? "sender-message-bubble" : "")">
        <div class="d-flex">
            @if (!isCurrentUserTheSender)
            {
                <p class="text-start fw-bold">@Model.User.UserName</p>
            }

            @if (isCurrentUserTheSender && !Model.DeletedAt.HasValue)
            {
                <div data-options-list class="ms-auto dropup badge">
                    <button class="btn dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false"></button>
                    <ul class="dropdown-menu">
                        <li>
                            <form data-delete-form-id="@Model.Id" asp-controller="Messages" asp-action="Delete" asp-route-id="@Model.Id">
                                <input type="submit" value="Delete" class="dropdown-item text-danger" />
                            </form>
                        </li>
                    </ul>
                </div>
            }
        </div>

        <p id="openMessageText@(Model.Id)" class="text-start">
            @if(Model.DeletedAt.HasValue)
            {
                <span class="fst-italic text-body-secondary">@Model.Text</span>
            } else
            {
                <text>@Model.Text</text>
            }
        </p>

        <p class="fst-italic @(isCurrentUserTheSender ? "text-end" : "text-start")">@Model.CreatedAt.ToShortTimeString()</p>
    </div>
</div>